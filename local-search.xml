<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Python</title>
    <link href="/2022/11/11/Python%E8%AF%86%E5%88%AB%E5%9C%86%E7%8E%87/"/>
    <url>/2022/11/11/Python%E8%AF%86%E5%88%AB%E5%9C%86%E7%8E%87/</url>
    
    <content type="html"><![CDATA[<h1 id="Python-圆率处理"><a href="#Python-圆率处理" class="headerlink" title="Python-圆率处理"></a>Python-圆率处理</h1><h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><h4 id="使用命令-pip-install-U-pip-升级pip时报错—-pip3"><a href="#使用命令-pip-install-U-pip-升级pip时报错—-pip3" class="headerlink" title="使用命令 pip install -U pip 升级pip时报错—! pip3"></a>使用命令 pip install -U pip 升级pip时报错—! pip3</h4><ul><li>报错内容：def read(rel_path: str) -&gt; str SyntaxError: invalid <a href="https://so.csdn.net/so/search?q=syntax&spm=1001.2101.3001.7020" title="syntax">syntax</a></li></ul><p>解决办法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">python -m pip install --user --upgrade pip==20.2.4<br>/usr/bin/python -m pip install --upgrade pip<br></code></pre></td></tr></table></figure><h3 id="识别图中的圆"><a href="#识别图中的圆" class="headerlink" title="识别图中的圆"></a>识别图中的圆</h3><p><a href="https://blog.csdn.net/jizhidexiaoming/article/details/98051051" title="参考链接">参考链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">此方法是一种动态自适应找圆方法</span><br><span class="hljs-string">使用方法：</span><br><span class="hljs-string">im_floodfill = get_adaptive_circle(crop_img)</span><br><span class="hljs-string">输入原图crop_img</span><br><span class="hljs-string">返回mask</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br> <br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br> <br> <br><span class="hljs-comment"># 求最大连通域的中心点坐标</span><br><span class="hljs-comment"># def centroid(max_contour):</span><br><span class="hljs-comment">#     moment = cv2.moments(max_contour)</span><br><span class="hljs-comment">#     if moment[&#x27;m00&#x27;] != 0:</span><br><span class="hljs-comment">#         cx = int(moment[&#x27;m10&#x27;] / moment[&#x27;m00&#x27;])</span><br><span class="hljs-comment">#         cy = int(moment[&#x27;m01&#x27;] / moment[&#x27;m00&#x27;])</span><br><span class="hljs-comment">#         return cx, cy</span><br><span class="hljs-comment">#     else:</span><br><span class="hljs-comment">#         return None</span><br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fillHole</span>(<span class="hljs-params">im_in</span>):<br>    im_floodfill = im_in.copy()<br>    im_floodfill = np.uint8(im_floodfill)<br>    row, col, dim = im_floodfill.shape<br> <br>    <span class="hljs-comment"># Mask used to flood filling</span><br>    <span class="hljs-comment"># Notice the size needs to be 2 pixels than the image</span><br>    mask = np.zeros((row+<span class="hljs-number">2</span>, col+<span class="hljs-number">2</span>), np.uint8)<br> <br>    <span class="hljs-comment"># Floodfill from point int(row/2), int(col/2)</span><br>    cv2.floodFill(im_floodfill, mask, (<span class="hljs-built_in">int</span>(row/<span class="hljs-number">2</span>), <span class="hljs-built_in">int</span>(col/<span class="hljs-number">2</span>)), (<span class="hljs-number">255</span>, <span class="hljs-number">255</span>,<span class="hljs-number">255</span>))<br>    <span class="hljs-comment"># cv2.morphologyEx(im_floodfill, cv2.MORPH_ELLIPSE, mask)</span><br>    <span class="hljs-keyword">return</span> im_floodfill<br> <br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_adaptive_circle</span>(<span class="hljs-params">crop_img</span>):<br>    ori_row, ori_col, ori_dim = crop_img.shape<br>    img = cv2.resize(crop_img, (<span class="hljs-number">240</span>, <span class="hljs-number">270</span>))<br>    row, col, dim = img.shape<br>    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)  <span class="hljs-comment"># 灰度图像</span><br> <br>    edges = cv2.Canny(gray, <span class="hljs-number">100</span>, <span class="hljs-number">200</span>)<br> <br>    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (<span class="hljs-number">15</span>, <span class="hljs-number">15</span>))  <span class="hljs-comment"># 圆形kernel</span><br>    closing = cv2.morphologyEx(edges, cv2.MORPH_CLOSE, kernel, <span class="hljs-number">100</span>)<br> <br>    <span class="hljs-comment"># 提取边缘</span><br>    contours, hierarchy = cv2.findContours(closing, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)<br> <br>    <span class="hljs-comment"># 找到最大的contour</span><br>    area = []<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(contours)):<br>        area.append(cv2.contourArea(contours[j]))<br>    max_idx = np.argmax(area)<br> <br>    <span class="hljs-comment"># 求椭圆</span><br>    ellipse = cv2.fitEllipse(contours[max_idx])  <span class="hljs-comment">#  [ (x, y) , (a, b), angle ]</span><br>    ellipse_img = np.zeros((row, col, dim))<br>    cv2.ellipse(ellipse_img, ellipse, (<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>), <span class="hljs-number">2</span>)<br> <br>    <span class="hljs-comment"># 填充椭圆</span><br>    ellipse_fill = fillHole(ellipse_img)<br>    ellipse_fill = cv2.resize(ellipse_fill, (ori_row, ori_col))<br>    ret, ellipse_fill = cv2.threshold(ellipse_fill[:, :, <span class="hljs-number">0</span>], <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, cv2.THRESH_BINARY | cv2.THRESH_TRIANGLE)<br> <br>    <span class="hljs-comment"># cv2.imshow(&#x27;Canny&#x27;, edges)</span><br>    <span class="hljs-comment"># cv2.imshow(&#x27;closing&#x27;, closing)</span><br>    <span class="hljs-comment"># cv2.imshow(&#x27;ellipse_img&#x27;, ellipse_img)</span><br>    <span class="hljs-comment"># cv2.imshow(&#x27;ellipse_fill&#x27;, ellipse_fill)</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># cv2.waitKey(0)</span><br> <br>    <span class="hljs-keyword">return</span> ellipse_fill<br> <br> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    img = cv2.imread(<span class="hljs-string">&quot;/home/1.png&quot;</span>)<br>    crop_img = img[<span class="hljs-number">650</span>:<span class="hljs-number">1400</span>, <span class="hljs-number">1000</span>:<span class="hljs-number">1750</span>]<br> <br>    ellipse = get_adaptive_circle(crop_img)<br> <br>    <span class="hljs-comment"># save_img_path = os.path.join(save_path, imgs_list[i])</span><br>    <span class="hljs-comment"># cv2.imwrite(save_img_path, ellipse)</span><br> <br> <br></code></pre></td></tr></table></figure><h3 id="计算轮廓的等效直径"><a href="#计算轮廓的等效直径" class="headerlink" title="计算轮廓的等效直径"></a>计算轮廓的等效直径</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_contour</span>(<span class="hljs-params">img</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;获取连通域</span><br><span class="hljs-string"></span><br><span class="hljs-string">    :param img: 输入图片</span><br><span class="hljs-string">    :return: 最大连通域</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 灰度化, 二值化, 连通域分析</span><br>    img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)<br><br>    ret, img_bin = cv2.threshold(img_gray, <span class="hljs-number">127</span>, <span class="hljs-number">255</span>, cv2.THRESH_BINARY)<br><br>    img_contour, contours, hierarchy = cv2.findContours(img_bin, cv2.RETR_LIST, cv2.CHAIN_APPROX_SIMPLE)<br><br>    <span class="hljs-keyword">return</span> contours[<span class="hljs-number">0</span>]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br><br>    <span class="hljs-comment"># 1.导入图片</span><br>    img_src = cv2.imread(<span class="hljs-string">&quot;cc.jpg&quot;</span>)<br>    img_result = img_src.copy()<br><br>    <span class="hljs-comment"># 2.获取连通域</span><br>    cont = get_contour(img_src)<br>    cv2.drawContours(img_result, cont, -<span class="hljs-number">1</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">2</span>)<br><br>    <span class="hljs-comment"># 3.获取轮廓面积</span><br>    cnt_area = cv2.contourArea(cont)<br><br>    <span class="hljs-comment"># 4.计算等效直径</span><br>    equi_diameter = np.sqrt(<span class="hljs-number">4</span> * cnt_area / np.pi)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;轮廓面积=&quot;</span>, cnt_area)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;等效直径=%.4f&quot;</span> % equi_diameter)<br><br>    cv2.circle(img_result, (<span class="hljs-number">100</span>, <span class="hljs-number">100</span>), <span class="hljs-built_in">int</span>(equi_diameter/<span class="hljs-number">2</span>), (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># 5.显示结果</span><br>    cv2.imshow(<span class="hljs-string">&quot;img_result&quot;</span>, img_result)<br><br>    cv2.waitKey()<br>    cv2.destroyAllWindows()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><br><br></code></pre></td></tr></table></figure><ul><li><p>cv2.threshold—对图片进行二值化处理</p><p><a href="https://www.cnblogs.com/yinliang-liang/p/9293310.html" title="参考链接">参考链接</a></p><p>函数为cv2.threshold() &amp;#x20;<br>这个函数有四个参数，第一个原图像，第二个进行分类的阈值，第三个是高于（低于）阈值时赋予的新值，第四个是选择方法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs bash">import cv2<br>import matplotlib.pyplot as plt<br><br>img = cv2.imread(<span class="hljs-string">&#x27;C:\\Users\\Administrator\\Desktop\\image\\ll.jpg&#x27;</span>)<br>gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)<br>ret,thresh1 = cv2.threshold(gray,127,255,cv2.THRESH_BINARY)<br>ret,thresh2 = cv2.threshold(gray,127,255,cv2.THRESH_BINARY_INV)<br>ret,thresh3 = cv2.threshold(gray,127,255,cv2.THRESH_TRUNC)<br>ret,thresh4 = cv2.threshold(gray,127,255,cv2.THRESH_TOZERO)<br>ret,thresh5 = cv2.threshold(gray,127,255,cv2.THRESH_TOZERO_INV)<br>titles = [<span class="hljs-string">&#x27;img&#x27;</span>,<span class="hljs-string">&#x27;BINARY&#x27;</span>,<span class="hljs-string">&#x27;BINARY_INV&#x27;</span>,<span class="hljs-string">&#x27;TRUNC&#x27;</span>,<span class="hljs-string">&#x27;TOZERO&#x27;</span>,<span class="hljs-string">&#x27;TOZERO_INV&#x27;</span>]<br>images = [img,thresh1,thresh2,thresh3,thresh4,thresh5]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(6):<br>    plt.subplot(2,3,i+1),plt.imshow(images[i],<span class="hljs-string">&#x27;gray&#x27;</span>)<br>    plt.title(titles[i])<br>    plt.xticks([]),plt.yticks([])<br>plt.show()<br></code></pre></td></tr></table></figure></li><li><p>解决putty上vim小键盘用不了的问题</p><p><a href="https://blog.csdn.net/zhangqingjie35/article/details/8946199" title="参考链接">参考链接</a></p><p>Putty设置中Teminal -&gt; Features - &gt; Disable application keypad mod前面选中即可。</p></li><li><p>cv2.findContours()函数</p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>第一个参数是寻找轮廓的图像；</p><p>第二个参数表示轮廓的检索模式，有四种（本文介绍的都是新的cv2接口）： &amp;#x20;<br>    cv2.RETR_EXTERNAL表示只检测外轮廓 &amp;#x20;<br>    cv2.RETR_LIST检测的轮廓不建立等级关系 &amp;#x20;<br>    cv2.RETR_CCOMP建立两个等级的轮廓，上面的一层为外边界，里面的一层为内孔的边界信息。如果内孔内还有一个连通物体，这个物体的边界也在顶层。 &amp;#x20;<br>    cv2.RETR_TREE建立一个等级树结构的轮廓。</p><p>第三个参数method为轮廓的近似办法 &amp;#x20;<br>    cv2.CHAIN_APPROX_NONE存储所有的轮廓点，相邻的两个点的像素位置差不超过1，即max（abs（x1-x2），abs（y2-y1））&#x3D;&#x3D;1 &amp;#x20;<br>    cv2.CHAIN_APPROX_SIMPLE压缩水平方向，垂直方向，对角线方向的元素，只保留该方向的终点坐标，例如一个矩形轮廓只需4个点来保存轮廓信息 &amp;#x20;<br>    cv2.CHAIN_APPROX_TC89_L1，CV_CHAIN_APPROX_TC89_KCOS使用teh-Chinl chain 近似算法</p><h2 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h2></li><li><p>cv2.findContours()函数返回两个值，一个是轮廓本身，还有一个是每条轮廓对应的属性</p></li><li><p>cv2.moments()—获取质心</p><p><a href="http://edu.pointborn.com/article/2021/11/19/1709.html" title="参考链接">参考链接</a></p><p><a href="https://blog.csdn.net/youandme520/article/details/108264034" title="参考链接2">参考链接2</a></p><p>M 中包含了很多轮廓的特征信息，比如 M[‘m00’] 表示轮廓面积，与前面 cv2.contourArea() 计算结果是一样的。质心也可以用它来算：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">M = cv2.moments(cnt)<br>cx, cy = M[<span class="hljs-string">&#x27;m10&#x27;</span>] / M[<span class="hljs-string">&#x27;m00&#x27;</span>], M[<span class="hljs-string">&#x27;m01&#x27;</span>] / M[<span class="hljs-string">&#x27;m00&#x27;</span>] <br><br></code></pre></td></tr></table></figure></li><li><p>可能有用的链接</p><p><a href="https://blog.csdn.net/zsc201825/article/details/92234600" title="二值图轮廓转为面矢量数据，并计算每个面矢量的面积"><strong>二值图轮廓转为面矢量数据，并计算每个面矢量的面积</strong></a></p><p><a href="https://zhuanlan.zhihu.com/p/398237689" title="python+opencv实现对位图提取轮廓并导出为无背景的svg矢量图"><strong>python+opencv实现对位图提取轮廓并导出为无背景的svg矢量图</strong></a></p><p><a href="https://blog.csdn.net/weixin_39541632/article/details/104168310" title="cv2小记——轮廓特征"><strong>cv2小记——轮廓特征</strong></a></p><p><a href="https://blog.csdn.net/LaoYuanPython/article/details/109020778" title="OpenCV-Python图像的减法运算cv2.subtract函数详解以及和矩阵减法的差异对比"><strong>OpenCV-Python图像的减法运算cv2.subtract函数详解以及和矩阵减法的差异对比</strong></a></p></li><li><p>cv2图片减法的解释</p><p><a href="http://www.juzicode.com/opencv-python-subtract-absdiff/" title="参考链接">参考链接</a></p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Study</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub搭建个人博客</title>
    <link href="/2022/11/09/GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/11/09/GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="采用Hexo在GitHub上搭建个人博客"><a href="#采用Hexo在GitHub上搭建个人博客" class="headerlink" title="采用Hexo在GitHub上搭建个人博客"></a>采用Hexo在GitHub上搭建个人博客</h1><blockquote><p>本人第一篇博文在此更新，搭建个人博客的想法很早就有了，曾经试图在阿里云的服务器上自己搭建一个网站，但是因为种种原因放弃了，现在考虑到多种需求，也当作知识的总结归纳，特此在GitHub上搭建一个个人博客网站。</p></blockquote><h2 id="1-注册Github"><a href="#1-注册Github" class="headerlink" title="1 注册Github"></a>1 注册Github</h2><h2 id="2-安装git"><a href="#2-安装git" class="headerlink" title="2 安装git"></a>2 安装git</h2><h2 id="3-安装node-js"><a href="#3-安装node-js" class="headerlink" title="3 安装node.js"></a>3 安装node.js</h2><h2 id="4-安装hexo"><a href="#4-安装hexo" class="headerlink" title="4 安装hexo"></a>4 安装hexo</h2><h2 id="5-部署到Github"><a href="#5-部署到Github" class="headerlink" title="5 部署到Github"></a>5 部署到Github</h2><h2 id="6"><a href="#6" class="headerlink" title="6"></a>6</h2>]]></content>
    
    
    
    <tags>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>思考</title>
    <link href="/2022/11/09/%E6%80%9D%E8%80%83/"/>
    <url>/2022/11/09/%E6%80%9D%E8%80%83/</url>
    
    <content type="html"><![CDATA[<h1 id="This-is-a-test-for-my-first-site"><a href="#This-is-a-test-for-my-first-site" class="headerlink" title="This is a test for my first site"></a>This is a test for my first site</h1><p>This is a paragraph to have a start.<br>I just wanna say that:<br><strong>it can be observed that when Na <em>atoms</em> are present between the layers of the layered oxide, the process of charge transfer will allow the aggregation of electron clouds near other atoms (Mn, Ni, O) in its vicinity.</strong></p><ul><li>first item<blockquote><p>try this!</p></blockquote></li><li>second item<br>  hello world!</li></ul><ol><li>This is another test</li></ol><h2 id="code-block"><a href="#code-block" class="headerlink" title="code block"></a>code block</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> nump <span class="hljs-keyword">as</span> np<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>my_site</title>
    <link href="/2022/11/08/my-site/"/>
    <url>/2022/11/08/my-site/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/11/08/hello-world/"/>
    <url>/2022/11/08/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
