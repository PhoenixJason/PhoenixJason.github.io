<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Github Page的部署-从零开始</title>
    <link href="/2022/11/13/Github%20Page%E7%9A%84%E9%83%A8%E7%BD%B2-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B/"/>
    <url>/2022/11/13/Github%20Page%E7%9A%84%E9%83%A8%E7%BD%B2-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B/</url>
    
    <content type="html"><![CDATA[<h1>Github Page的部署-从零开始</h1><h2 id="1-注册Github">1 注册Github</h2><h4 id="注册账号">注册账号</h4><p>注册账号直接按照流程注册即可，注册一个github账号是完全免费的</p><p>注册的时候注意，如果你想直接使用 username.github.io访问你的page的话，这里取的名字就最好是你后面创建仓库的名字</p><h4 id="创建仓库">创建仓库</h4><p>创建一个仓库，命名规则为 <a href="http://username.github.io">username.github.io</a></p><blockquote><p>❗如果你想直接用username.github.io访问你的page的话，这里的username要与你注册的用户名一致才行！</p></blockquote><p> 如图，选择public，Description看情况填写即可：</p><p><img src="https://image.phoenixjason.cn/file/phoenixjason-img/GithubPage/1.png" alt=""></p><h2 id="2-在你的电脑上安装需要的软件">2 在你的电脑上安装需要的软件</h2><blockquote><p>我所安装的软件全是安装在本地window10系统中</p></blockquote><h3 id="安装git">安装git</h3><p>Git的下载地址为 <a href="https://git-scm.com/download/win" title="链接">链接</a></p><p>下载后直接安装就行，基本配置全部按照默认的来就行，并没有太多需要注意的地方</p><p>可以参考这个<a href="https://www.cnblogs.com/jytx/p/5602927.html" title="链接">链接</a>来进行安装</p><h3 id="安装node-js">安装node.js</h3><p>Node.js与Git的安装一致，直接到官网下载安装即可，下载地址为 <a href="https://nodejs.org/en/download/" title="链接">链接</a></p><p>也可以参考这篇教程来进行安装<a href="https://blog.csdn.net/zhouyan8603/article/details/109039732" title=" 链接"> 链接</a></p><p>git和node.js安装完成之后，打开windows自带的shell，通过以下指令分别查看是否安装成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">PS C:\Users\Jason&gt; git -v  <span class="hljs-comment">#查看git的版本</span><br>git version 2.38.1.windows.1<br><br>PS C:\Users\Jason&gt; node -v <span class="hljs-comment">#查看node的版本</span><br>v18.12.1<br>PS C:\Users\Jason&gt; npm -v <span class="hljs-comment">#查看npm的版本</span><br>8.19.2<br></code></pre></td></tr></table></figure><p>如果以上的指令都能返回出版本号，那么代表软件安装成功了，此外网上还有不少教程有多的一步，就是设置一个镜像网站，方便下载包什么的，但是因为我自己挂了梯子的，所以这一步我就省略了（GitHub不挂梯子还是有时候连接不上，如果想稳定的使用GitHub来作为博客的载体，还是应该需要一个梯子的）</p><h3 id="安装hexo">安装hexo</h3><p>首先，在自己的电脑中选择一个目录来作为自己博客的文件夹，建议这个时候选择的目录中不要带中文吧，不然鬼知道以后会报什么错误。</p><p>然后这个时候如果你的git安装成功了的话，在这个目录下鼠标右键点击，是会出现两个新的选项的</p><p><img src="https://image.phoenixjason.cn/file/phoenixjason-img/GithubPage/2.png" alt=""></p><p>选择Git Bash Here，进入shell界面</p><p>然后输入 以下指令安装hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-cli -g<br></code></pre></td></tr></table></figure><p>安装之后可以通过hexo -v查看是否安装成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">Jason@Phoenix MINGW64 /d/Site/blog<br>$ hexo -v<br>INFO  Validating config<br>hexo: 6.3.0<br>hexo-cli: 4.3.0<br>os: win32 10.0.22621<br>node: 18.12.1<br>v8: 10.2.154.15-node.12<br>uv: 1.43.0<br>zlib: 1.2.11<br>brotli: 1.0.9<br>ares: 1.18.1<br>modules: 108<br>nghttp2: 1.47.0<br>napi: 8<br>llhttp: 6.0.10<br>openssl: 3.0.7+quic<br>cldr: 41.0<br>icu: 71.1<br>tz: 2022b<br>unicode: 14.0<br>ngtcp2: 0.8.1<br>nghttp3: 0.7.0<br><br></code></pre></td></tr></table></figure><p>下面输出的就是安装的一些信息，这样就代表hexo安装成功了。</p><h2 id="3-创建博客并设置主题">3 创建博客并设置主题</h2><p>hexo安装好之后就可以正式开始完成你的博客并应用你想要的主题了</p><p>依然与之前的操作类似，在你的博客的目录下选择Git Bash Here，进入shell</p><p>输入hexo ini name，初始化你的博客，name是你自己命名，例如：blog</p><p>注意：选择的目录应该是一个空的文件夹，里面不能有其它文件，不然这一步会报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">Jason@Phoenix MINGW64 /d/Site/tec<br>$ hexo ini blog<br>INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.git<br>INFO  Install dependencies<br>INFO  Start blogging with Hexo!<br><br></code></pre></td></tr></table></figure><p>这个时候你就可以在你选择的目录下看到hexo自动帮你创建好的文件了</p><p><img src="https://image.phoenixjason.cn/file/phoenixjason-img/GithubPage/3.png" alt=""></p><p><img src="https://image.phoenixjason.cn/file/phoenixjason-img/GithubPage/4.png" alt=""></p><p>这里面比较重要的内容是_config.yml，这个里面是hexo在渲染你的博客的时候的一些设置，以后可以根据需要对其修改。</p><p>然后进入到blog目录下，用两个指令来在本地生成并预览博客</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs bash">Jason@Phoenix MINGW64 /d/Site/tec<br>$ <span class="hljs-built_in">cd</span> blog/   <span class="hljs-comment"># 切换到blog目录</span><br><br>Jason@Phoenix MINGW64 /d/Site/tec/blog<br>$ hexo g <span class="hljs-comment"># 渲染并生成博客</span><br>INFO  Validating config<br>INFO  Start processing<br>INFO  Files loaded <span class="hljs-keyword">in</span> 355 ms<br>INFO  Generated: archives/index.html<br>INFO  Generated: archives/2022/index.html<br>INFO  Generated: index.html<br>INFO  Generated: fancybox/jquery.fancybox.min.css<br>INFO  Generated: js/script.js<br>INFO  Generated: css/style.css<br>INFO  Generated: js/jquery-3.4.1.min.js<br>INFO  Generated: css/fonts/fontawesome-webfont.woff2<br>INFO  Generated: archives/2022/11/index.html<br>INFO  Generated: fancybox/jquery.fancybox.min.js<br>INFO  Generated: css/fonts/fontawesome-webfont.eot<br>INFO  Generated: css/fonts/fontawesome-webfont.woff<br>INFO  Generated: css/fonts/FontAwesome.otf<br>INFO  Generated: css/fonts/fontawesome-webfont.ttf<br>INFO  Generated: css/images/banner.jpg<br>INFO  Generated: 2022/11/13/hello-world/index.html<br>INFO  Generated: css/fonts/fontawesome-webfont.svg<br>INFO  17 files generated <span class="hljs-keyword">in</span> 750 ms<br><br>Jason@Phoenix MINGW64 /d/Site/tec/blog<br>$ hexo s <span class="hljs-comment"># 在本地预览博客</span><br>INFO  Validating config<br>INFO  Start processing<br>INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.<br><br></code></pre></td></tr></table></figure><p>在浏览器输入  <a href="http://localhost:4000/">http://localhost:4000/</a> 就可以预览博客了</p><p><img src="https://image.phoenixjason.cn/file/phoenixjason-img/GithubPage/5.png" alt=""></p><p>这里是用的hexo本身自带的主题，个人觉得不是很好看，因此可以自己选择一个喜欢的主题。主题在hexo官网上有，<a href="https://hexo.io/themes/" title="链接">链接</a></p><p><img src="https://image.phoenixjason.cn/file/phoenixjason-img/GithubPage/6.png" alt=""></p><p>我选择了Fluid这个主题，这里是他的<a href="https://github.com/fluid-dev/hexo-theme-fluid" title="GitHub链接">GitHub链接</a>，当然你也可以直接在hexo官网上搜索Fluid，然后也会给出这个主题的链接。</p><p>主题的安装一般都是一样的，最简单的就是直接通过npm安装，这种在hexo官网上能搜到的主题一般都可以直接通过npm安装的，fluid的安装命令如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>我的运行结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">Jason@Phoenix MINGW64 /d/Site/tec/blog<br>$ npm install --save hexo-theme-fluid<br><br>added 1 package, and audited 241 packages <span class="hljs-keyword">in</span> 3s<br><br>22 packages are looking <span class="hljs-keyword">for</span> funding<br>  run `npm fund` <span class="hljs-keyword">for</span> details<br><br>found 0 vulnerabilities<br><br></code></pre></td></tr></table></figure><p>理论上来说这样就是可以了的，但是我在用这个方法时，运行结束后我不能在theme里面找到fluid的文件夹，推测是hexo-cli版本不够的原因，所以我用了第二个方法，这个方法也是更加普适的方法，首先下载主题的release版本：</p><p><img src="https://image.phoenixjason.cn/file/phoenixjason-img/GithubPage/7.png" alt=""></p><p>下载好之后，解压，重命名为fluid，再将其复制到你创建的blog目录下的theme里面。</p><p><img src="https://image.phoenixjason.cn/file/phoenixjason-img/GithubPage/8.png" alt=""></p><p>然后打开该fluid，复制其中的_config.yml的内容，再到blog目录下创建一个文件，命名为_config.fluid.yml，然后将刚刚复制的内容粘贴进去，保存。</p><p><img src="https://image.phoenixjason.cn/file/phoenixjason-img/GithubPage/9.png" alt=""></p><p>随后打开blog目录下的_config.yml（注意，不是blog/theme/目录下的那个_config.yml），在里面找到theme，将theme后面的landscape改为fluid。</p><p><img src="https://image.phoenixjason.cn/file/phoenixjason-img/GithubPage/10.png" alt=""></p><p>保存好之后就可以使用fluid的主题了</p><p>这个时候再回到git bash中，先输入一下hexo clean（推荐每次你要重新生成博客的时候都先clean一下，避免出错），然后再hexo g与hexo s。以下是我用这个命令的输出结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs bash">Jason@Phoenix MINGW64 /d/Site/tec/blog<br>$ hexo clean <span class="hljs-comment"># 清除已有的博客文件</span><br>INFO  Validating config<br>INFO  Deleted database.<br>INFO  Deleted public folder.<br><br>Jason@Phoenix MINGW64 /d/Site/tec/blog<br>$ hexo g <span class="hljs-comment"># 生成博客文件</span><br>INFO  Validating config<br>INFO  Start processing<br>INFO<br>------------------------------------------------<br>|                                              |<br>|     ________  __            _        __      |<br>|    |_   __  |[  |          (_)      |  ]     |<br>|      | |_ \_| | | __   _   __   .--.| |      |<br>|      |  _|    | |[  | | | [  |/ /<span class="hljs-string">&#x27;`\&#x27;</span> |      |<br>|     _| |_     | | | \_/ |, | || \__/  |      |<br>|    |_____|   [___]<span class="hljs-string">&#x27;.__.&#x27;</span>_/[___]<span class="hljs-string">&#x27;.__.;__]     |</span><br><span class="hljs-string">|                                              |</span><br><span class="hljs-string">|       Thank you for using Fluid theme !      |</span><br><span class="hljs-string">|   Docs: https://hexo.fluid-dev.com/docs/en/  |</span><br><span class="hljs-string">|                                              |</span><br><span class="hljs-string">------------------------------------------------</span><br><span class="hljs-string"></span><br><span class="hljs-string">INFO  Files loaded in 225 ms</span><br><span class="hljs-string">INFO  Generated: local-search.xml</span><br><span class="hljs-string">INFO  Generated: tags/index.html</span><br><span class="hljs-string">INFO  Generated: links/index.html</span><br><span class="hljs-string">INFO  Generated: archives/index.html</span><br><span class="hljs-string">INFO  Generated: archives/2022/index.html</span><br><span class="hljs-string">INFO  Generated: categories/index.html</span><br><span class="hljs-string">INFO  Generated: archives/2022/11/index.html</span><br><span class="hljs-string">INFO  Generated: 404.html</span><br><span class="hljs-string">INFO  Generated: index.html</span><br><span class="hljs-string">INFO  Generated: xml/local-search.xml</span><br><span class="hljs-string">INFO  Generated: img/avatar.png</span><br><span class="hljs-string">INFO  Generated: img/police_beian.png</span><br><span class="hljs-string">INFO  Generated: img/fluid.png</span><br><span class="hljs-string">INFO  Generated: img/loading.gif</span><br><span class="hljs-string">INFO  Generated: css/highlight.css</span><br><span class="hljs-string">INFO  Generated: js/boot.js</span><br><span class="hljs-string">INFO  Generated: css/highlight-dark.css</span><br><span class="hljs-string">INFO  Generated: js/color-schema.js</span><br><span class="hljs-string">INFO  Generated: js/leancloud.js</span><br><span class="hljs-string">INFO  Generated: css/gitalk.css</span><br><span class="hljs-string">INFO  Generated: js/plugins.js</span><br><span class="hljs-string">INFO  Generated: css/main.css</span><br><span class="hljs-string">INFO  Generated: js/utils.js</span><br><span class="hljs-string">INFO  Generated: js/img-lazyload.js</span><br><span class="hljs-string">INFO  Generated: js/events.js</span><br><span class="hljs-string">INFO  Generated: js/local-search.js</span><br><span class="hljs-string">INFO  Generated: 2022/11/13/hello-world/index.html</span><br><span class="hljs-string">INFO  Generated: img/default.png</span><br><span class="hljs-string">INFO  28 files generated in 278 ms</span><br><span class="hljs-string"></span><br><span class="hljs-string">Jason@Phoenix MINGW64 /d/Site/tec/blog</span><br><span class="hljs-string">$ hexo s # 预览博客</span><br><span class="hljs-string">INFO  Validating config</span><br><span class="hljs-string">INFO  Start processing</span><br><span class="hljs-string">INFO</span><br><span class="hljs-string">------------------------------------------------</span><br><span class="hljs-string">|                                              |</span><br><span class="hljs-string">|     ________  __            _        __      |</span><br><span class="hljs-string">|    |_   __  |[  |          (_)      |  ]     |</span><br><span class="hljs-string">|      | |_ \_| | | __   _   __   .--.| |      |</span><br><span class="hljs-string">|      |  _|    | |[  | | | [  |/ /&#x27;</span>`\<span class="hljs-string">&#x27; |      |</span><br><span class="hljs-string">|     _| |_     | | | \_/ |, | || \__/  |      |</span><br><span class="hljs-string">|    |_____|   [___]&#x27;</span>.__.<span class="hljs-string">&#x27;_/[___]&#x27;</span>.__.;__]     |<br>|                                              |<br>|       Thank you <span class="hljs-keyword">for</span> using Fluid theme !      |<br>|   Docs: https://hexo.fluid-dev.com/docs/en/  |<br>|                                              |<br>------------------------------------------------<br><br>INFO  Hexo is running at http://localhost:4000/ . Press Ctrl+C to stop.<br><br></code></pre></td></tr></table></figure><p>可以看到，装了flui主题之后在生成博客的时候会有明显的提示，打开localhost:4000，也会发现主题已经应用。</p><p><img src="https://image.phoenixjason.cn/file/phoenixjason-img/GithubPage/11.png" alt=""></p><p>接下来就可以使用这个注意愉快的开始写博客了，fluid的一些特性以及配置都可以在blog目录下的_config.yml和_config.fluid.yml中修改，这两个文件中都对各个参数给出了非常容易理解的注释，修改起来还是很方便的。</p><h2 id="4-部署到GitHub-Page">4 部署到GitHub Page</h2><p>写好了博客还需要将其部署到自己的Github上才行，接下来说一下怎么部署。</p><p>首先，你需要在Git Bash中与你的Github链接，依次输入以下两个指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;用户名&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;邮箱&quot;</span><br><br></code></pre></td></tr></table></figure><p>然后需要生成你的ssh密钥，来链接github，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;你的Github邮箱&quot;</span><br></code></pre></td></tr></table></figure><p>连续按enter键，它会告诉你ssh密钥生成成功，并且存到了一个路径下，这个时候可以再输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.ssh/id_rsa.pub<br></code></pre></td></tr></table></figure><p>这个时候Git Bash上会输出密钥的内容，可以直接复制，当然，如果不习惯Linux操作内容的话，也可以按照之前它输出的路径直接打开文件夹去找对应的id_rsa.pub文件，再用记事本打开那个文件并复制其中的内容。复制好密钥之后，打开你的Github主页，进入到Settings，选择SSH and GPG keys，点击New SSH key。</p><p><img src="https://image.phoenixjason.cn/file/phoenixjason-img/GithubPage/12.png" alt=""></p><p>Title可以随便写一个，Key Type推荐选择Autentication Key，然后将Key粘贴到下面的框中，再点击Add SSH key即可。</p><p>这个时候密钥就配置好了，回到Git Bash，输入:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br><br></code></pre></td></tr></table></figure><p>如果跟返回的是类似我的结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">Jason@Phoenix MINGW64 /d/Site/tec/blog<br>$ ssh -T git@github.com<br>Hi PhoenixJason! You<span class="hljs-string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><p>那么就代表链接成功了，接下来就是准备部署，首先需要安装一下hexo的部署工具，直接在Git Bash中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm i hexo-deployer-git<br></code></pre></td></tr></table></figure><p>安装好之后，还需要修改一下_config.yml中的部署信息，如下图</p><p><img src="https://image.phoenixjason.cn/file/phoenixjason-img/GithubPage/13.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">deploy:<br>  <span class="hljs-built_in">type</span>: <span class="hljs-string">&#x27;git&#x27;</span> <span class="hljs-comment"># type设置为git，注意git和https部署的类型不一样，下面的repo格式也不一样</span><br>  repo: git@github.com:username/username.github.io.git <span class="hljs-comment"># username即为你的用户名和仓库名，如果你前面注册的时候两个名字是一样的话，这里也应该是一样的</span><br>  branch: master<br></code></pre></td></tr></table></figure><p>配置好再保存，就可以直接在blog目录下，在Git Bash中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo d<br></code></pre></td></tr></table></figure><p>即可成功部署。</p><p>部署之后就可以用username.github.io查看你的博客网站了，注意部署之后GitHub上也会需要一定的时间来重新部署，这个你可以打开仓库的action查看部署进度。</p><h2 id="5-设置自定义域名">5 设置自定义域名</h2><p>一般来说，GitHub上的page网址格式统一是 <code>username.github.io</code>，名字虽然不算难记，但是多少逼格不够，所以如果你自己有一个域名的话，就可以自定义域名访问，比如我的<code>phoenixjason.cn</code>。以下是设置方法。</p><p>首先需要ping一下你的<code>username.github.io</code>，这个我是通过另外一台服务器来ping的，可以返回ipv4的地址，但是我在自己的电脑上ping，就没办法返回ipv4的地址。</p><p><img src="https://image.phoenixjason.cn/file/phoenixjason-img/GithubPage/14.png" alt=""></p><p>记住这个ipv4地址，然后到你的域名的控制台，添加解析记录。这里虽然我是在阿里云买的域名，但是由于我后面搭建图床的一系列操作，所以我就转到cloud flare去解析了，但是添加解析记录的方法都是一致的。不过转过去貌似要修改一下解析的服务器，这个就需要再Cloud Flare中复制解析服务器的地址，再到阿里云里面取改一下，这个调整起来也很简单。</p><p><img src="https://image.phoenixjason.cn/file/phoenixjason-img/GithubPage/15.png" alt=""></p><p>这里第一和第三条解析记录就是为了自定义域名的，第二条是为了图床用的，第一条解析记录A，@，内容就是你刚刚获得的ipv4地址，第三条记录时CNAME，www，内容则是<code>username.github.io</code>。解析记录添加好之后，就可以打开你的Github，进入刚刚创建的仓库，选择setting-pages，在最下面，Custom Domain中输入你的域名，再点击save即可</p><p><img src="https://image.phoenixjason.cn/file/phoenixjason-img/GithubPage/16.png" alt=""></p><p>之后你就可以直接使用你的域名访问你的博客网站了。</p><h2 id="6-图床的设置">6 图床的设置</h2><p>开始写了博客就知道了图床的重要性，所以我最终还是决定搭建一个图床，虽然最后PicGo部分还是调试失败了，但是前期的工作还是搭建了一个勉强能用的免费图床，而且因为我是用wolai编写博客再导出md文件，图片都是直接帮我打包好了的，我只要改一下名字上传即可，所以没有PicGo倒是对我影响也不大。</p><p>我的图床是基于Backblaze(B2)和CloudFlare搭建的，也是跟着网上的教程一步一步来的，目前来收运行的比较稳定。</p><p>首先需要再Backblaze上创建一个账号并创建一个储存桶。这里是Backblaze的<a href="https://secure.backblaze.com/" title="链接">链接</a></p><p><img src="https://image.phoenixjason.cn/file/phoenixjason-img/GithubPage/17.png" alt=""></p><p>注意创建的时候记得选择Public，名字的话就随便取了，推荐复杂一点，不要太容易让别人知道。</p><p>创建好之后，首先打开CORS rules，选择Share everything in this bucket with all HTTPS origins</p><p><img src="https://image.phoenixjason.cn/file/phoenixjason-img/GithubPage/18.png" alt=""></p><p>然后打开bucket settings，在bucket info中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<span class="hljs-string">&quot;cache-control&quot;</span>:<span class="hljs-string">&quot;max-age=4320000&quot;</span>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://image.phoenixjason.cn/file/phoenixjason-img/GithubPage/19.png" alt=""></p><p>然后可以随便上传一张图片，然后点击图片，获取friendly URL</p><p><img src="https://image.phoenixjason.cn/file/phoenixjason-img/GithubPage/20.png" alt=""></p><p>记住这个链接，然后打开Cloud Flare，添加一条解析记录</p><p><img src="https://image.phoenixjason.cn/file/phoenixjason-img/GithubPage/21.png" alt=""></p><p>就是这里的第二条解析记录，可以用一个二级域名，比如我的就是image，内容就指向你刚刚获取的那个friendly URL。添加了解析记录之后，点击SST/TLS，选择 完全(严格)</p><p><img src="https://image.phoenixjason.cn/file/phoenixjason-img/GithubPage/22.png" alt=""></p><p>然后点击规则，添加两条规则，具体可以参考链接</p><blockquote><p>注意：这里我也不清楚这两条规则是否会有用，所以详细步骤就不写了，因为我认为这两个规则可能是为了后续用PicGo等软件的时候所需要的。</p></blockquote><p>接下来，你就可以通过二级域名/file/bucketname/img_name.jpg的格式取访问你的图片了，例如</p><p><img src="https://image.phoenixjason.cn/file/phoenixjason-img/GithubPage/23.png" alt=""></p><p>这样一个简易的图床就搭建好了，配合wolai编写blog，图片直接插入到wolai中，再将页面导出markdown格式，它会直接将你的图片打包在一个目录下，但是这个命名规则可能不能被markdown接受，所以最好自己再对图片改一下名，然后按照规则自己把url写好，替换掉markdown里面的图片引用，最后将图片打包好上传到backblaze中即可。（感觉还是有点麻烦，不过在编写其它内容的时候用wolai不用考虑太多，图片插入麻烦一点也没啥了，如果以后我自建一个服务器的话，这样做文件迁移也好弄）</p><h2 id="7-总结">7 总结</h2><p>以上就是全部的内容了，我的博客也算是才搭建完毕</p><p><img src="https://image.phoenixjason.cn/file/phoenixjason-img/GithubPage/24.png" alt=""></p><p>总体来说还是需要修改很多东西的，目前也在探索的阶段，不过自己从零开始搭建一个博客网站还是学到了不少东西的，以后也会基于Fluid自定义一些页面吧，不过那都是后话了，图床的话我就打算先这样用着，毕竟一直白嫖也不是个事儿。以后可能会自己弄一个服务器作为图床，也需要探究怎么弄，慢慢来吧。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>Computer</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算分子动力学直径</title>
    <link href="/2022/11/12/%E9%AB%98%E6%96%AF%E8%AE%A1%E7%AE%97%E5%88%86%E5%AD%90%E5%8A%A8%E5%8A%9B%E5%AD%A6%E7%9B%B4%E5%BE%84/"/>
    <url>/2022/11/12/%E9%AB%98%E6%96%AF%E8%AE%A1%E7%AE%97%E5%88%86%E5%AD%90%E5%8A%A8%E5%8A%9B%E5%AD%A6%E7%9B%B4%E5%BE%84/</url>
    
    <content type="html"><![CDATA[<h1>高斯计算分子动力学直径</h1><h2 id="前期准备">前期准备</h2><p>主要参考的是这篇<a href="http://bbs.keinsci.com/thread-14264-1-1.html" title="博文">博文</a></p><p>主要参考文献为 J. Phys. Chem. A, 118, 1150 (2014)</p><p>基于分子电子密度等值面的估计分子动力学直径的方法，对于文中测试的一系列小分子，计算结果和被普遍采用的Breck书里的那些值有不错的线性相关性。</p><p>在Multiwfn中输入以下命令</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">12  //定量分子表面分析<br>1   //选择表面的定义<br>1   //用电子密度等值面作为表面<br>0.0015  //用0.0015 a.u.作为等值面数值<br>6  //开始分析（但不考虑映射的函数，因为这不是我们目前感兴趣的）<br>6  //将表面顶点坐标导出为当前目录下的vtx.pdb<br><br></code></pre></td></tr></table></figure><p>通过vtx.pdb来考察分子动力学直径，主要有两个方法</p><ol><li><p>VMD，肉眼判断，再测距离</p></li><li><p>通过Multiwfn直接统计表面顶点的最大、最小坐标下</p></li></ol><h3 id="软件安装">软件安装</h3><p>以下两个软件我都是安装的win版的</p><h4 id="Multiwfn的安装">Multiwfn的安装</h4><p>在官网上下载软件，<a href="http://sobereva.com/multiwfn/" title="官网链接">官网链接</a></p><p>下载的是win版的，下载下来解压即可以直接使用。有个小问题是路径中不能有中文，不然无法正确读取文件。</p><h4 id="VMD的安装">VMD的安装</h4><p>下载了VMD，准备安装了才发现我以前安装了这个软件，安装这个软件需要登记一下邮箱等信息，如实填写就行。<a href="https://www.ks.uiuc.edu/Research/vmd/alpha/" title="下载链接">下载链接</a></p><h2 id="复现博文中的CO2分子动力学直径">复现博文中的CO2分子动力学直径</h2><h3 id="高斯计算">高斯计算</h3><h4 id="建模，gjf的编写">建模，gjf的编写</h4><p>按照博文中的数据写的gjf文件，对开头的chk和内存等设置做了修改。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">%chk=./CO2.chk<br>%mem=50000MB<br>%nprocshared=32<br># PBE1PBE/def2TZVPopt<br><br>Title Card Required<br><br>0 1<br>C 0.0 0.0 0.0<br>O 0.0 0.0 1.2584<br>O 0.0 0.0 -1.2584<br></code></pre></td></tr></table></figure><h4 id="计算与后处理">计算与后处理</h4><p>计算结果出得很快，几秒就计算完毕了, 以下是查看log文件的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">[jason@cabc1 new]$ tail CO2.log<br><br><br> I WANT TO KNOW HOW GOD CREATED THE WORLD.  I AM NOT INTERESTED IN<br> THIS OR THAT PHENOMENON, IN THE SPECTRUM OF THIS OR THAT ELEMENT.<br> I WANT TO KNOW HIS THOUGHTS, THE REST ARE DETAILS.<br>     -- ALBERT EINSTEIN<br> Job cpu time:       0 days  0 hours  3 minutes 46.0 seconds.<br> Elapsed time:       0 days  0 hours  0 minutes  9.3 seconds.<br> File lengths (MBytes):  RWF=     10 Int=      0 D2E=      0 Chk=      2 Scr=      1<br> Normal termination of Gaussian 16 at Fri Nov 11 17:17:20 2022.<br><br></code></pre></td></tr></table></figure><p>对chk文件用formchk进行转化，将其转化为fchk文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">[jason@cabc1 new]$ formchk CO2.chk<br> Read checkpoint file CO2.chk<br> Write formatted file CO2.fchk<br> Initial coordinates match /B/.<br> Warning:  fchk array  MicOpt element           1 has value 4622945017495814144 set to -1.<br> Warning:  fchk array  MicOpt element           2 has value 4625193954506324261 set to -1.<br> Warning:  fchk array  MicOpt element           3 has value 4625193954506324261 set to -1.<br> Rotating derivatives, DoTrsp=T IDiff= 1 LEDeriv=    485 LFDPrp=       0 LDFDPr=       0.<br><br></code></pre></td></tr></table></figure><p>出现了warning，但是我这个时候没有注意到这个warning，后面了解到这个是因为版本冲突引起的问题，在后文中会给出解决办法，这样依然可以生成fchk文件，并且后续处理我也没有遇到什么问题。</p><h3 id="Multiwfn处理计算数据">Multiwfn处理计算数据</h3><p>这里的处理就相当简单了，直接按照前面博文中所写的步骤运行就行，Multiwfn对新手上手来说还是很友好的，尤其是win版，开始直接按enter还可以图形化窗口选择输入文件，唯一需要注意的是文件的路径中不能有中文，不然会读取失败</p><blockquote><p>感觉好多计算的软件都不支持中文路径，MS里面有时候报错也是因为路径中有中文的问题，所以还是在盘符里面单独创建一个完全没有中文的文件来存放计算相关的文件比较合适，计算文件也不要用中文命名，避免出现各种奇葩报错。</p></blockquote><h3 id="VMD查看动力学直径">VMD查看动力学直径</h3><p>根据前一步得到的fchk文件，直接拖进VMD里面，然后按照文章中的设置，调整一下，很容易就读出了动力学直径。</p><p><img src="https://image.phoenixjason.cn/file/phoenixjason-img/MDD/1.png" alt="原始处理" title="原始处理"></p><p><img src="https://image.phoenixjason.cn/file/phoenixjason-img/MDD/2.png" alt="转化为点图" title="转化为点图"></p><p>经过选点处理，得到结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">Added new Bonds label MOL1:C/MOL1:C = 3.346498<br></code></pre></td></tr></table></figure><p><img src="https://image.phoenixjason.cn/file/phoenixjason-img/MDD/3.png" alt=""></p><p>与文章中的结果符合得很好，反而跟博文中的结果有点差异，看来选点对结果的影响还是很大的，这一步或许需要用程序来处理了（挖个坑，以后科研有需要了可以想想怎么写），这里跟博文中的结果差异，不知道是选点的问题还是formchk文件的问题，不过总体来说无伤大雅。</p><h2 id="对马来酸酐的分子动力学直径的计算">对马来酸酐的分子动力学直径的计算</h2><h3 id="高斯计算-2">高斯计算</h3><h4 id="建模，生成gjf文件">建模，生成gjf文件</h4><p>马来酸酐的化学式如图：</p><p><img src="https://image.phoenixjason.cn/file/phoenixjason-img/MDD/4.png" alt=""></p><p>这个我是用Chem Draw 20.0画的，用这个软件画完就可以直接生成mol文件，然后就可以导入到GaussianView里面生成gjf文件。对开头的chk以及mem和方法等自己输入设置之后，最后得到的gjf文件如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">%chk=./MA.chk<br>%mem=50000MB<br>%nprocshared=32<br># b3lyp/6-311+g(d, p) opt freq em=gd3<br><br>MA.mol<br><br>0 1<br> C                 -0.71360000    0.29750000    0.00000000<br> C                 -0.71360000   -0.52750000    0.00000000<br> C                  0.07110000   -0.78240000    0.00000000<br> C                  0.55600000   -0.11500000    0.00000000<br> O                  0.07110000    0.55240000    0.00000000<br> O                 -1.38100000    0.78240000    0.00000000<br> O                  1.38100000   -0.11500000    0.00000000<br> H                 -1.57922481   -1.15646239    0.00000000<br> H                  0.40178325   -1.80001908    0.00000000<br> <br><br></code></pre></td></tr></table></figure><p>这里用的是另外的基组进行计算，这个是以后我打算在自己的研究上用的泛函与基组，目前来说不清楚这样的设置是否能够得到准确的信息，但练手嘛，暂且先这样用着。</p><h4 id="计算与后处理-2">计算与后处理</h4><p>这个虽然多了几个原子，但是计算结果依然很快，不到一分钟就算完了，以下是tail MA.log得到的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">[jason@cabc1 MDD]$ tail MA.log<br><br> ... A MOLECULAR SYSTEM ... (PASSES) ... FROM ONE STATE OF EQUILIBRIUM<br> TO ANOTHER ... BY MEANS OF ALL POSSIBLE INTERMEDIATE PATHS,<br> BUT THE PATH MOST ECONOMICAL OF ENERGY WILL BE THE MORE OFTEN TRAVELED.<br><br>                      -- HENRY EYRING, 1945<br> Job cpu time:       0 days  0 hours  8 minutes 24.3 seconds.<br> Elapsed time:       0 days  0 hours  0 minutes 16.7 seconds.<br> File lengths (MBytes):  RWF=     32 Int=      0 D2E=      0 Chk=      4 Scr=      1<br> Normal termination of Gaussian 16 at Fri Nov 11 20:18:16 2022.<br><br></code></pre></td></tr></table></figure><p>随后用formchk转化chk文件的格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">[jason@cabc1 MDD]$ formchk MA.chk<br> Read checkpoint file MA.chk<br> Write formatted file MA.fchk<br> Coordinates translated and rotated.<br> Coordinates match /B/ after translation and rotation.<br> Warning:  fchk array  MicOpt element           1 has value 4622945017495814144 set to -1.<br> Warning:  fchk array  MicOpt element           2 has value 4622945017495814144 set to -1.<br> Warning:  fchk array  MicOpt element           3 has value 4622945017495814144 set to -1.<br> Warning:  fchk array  MicOpt element           4 has value 4622945017495814144 set to -1.<br> Warning:  fchk array  MicOpt element           5 has value 4625193954506324261 set to -1.<br> Warning:  fchk array  MicOpt element           6 has value 4625193954506324261 set to -1.<br> Warning:  fchk array  MicOpt element           7 has value 4625193954506324261 set to -1.<br> Warning:  fchk array  MicOpt element           8 has value 4607217659633734768 set to -1.<br> Warning:  fchk array  MicOpt element           9 has value 4607217659633734768 set to -1.<br> Rotating derivatives, DoTrsp=T IDiff= 2 LEDeriv=   1349 LFDPrp=       0 LDFDPr=       0.<br><br></code></pre></td></tr></table></figure><p>这里的warning就很多，我这次就注意到了这个问题，于是我上网查了一下原因，可以参考的文章有：<a href="http://bbs.keinsci.com/thread-9632-1-1.html" title="链接1">链接1</a> <a href="https://mp.weixin.qq.com/s/HmUST3mqsy659ZPyJoIP6g" title="链接2">链接2</a>，大致上就是g06和g16的formchk文件是不一致的，解决办法也很简单，拿对应版本的formchk文件就行，我老师之前给我的应该是g09版本的formchk文件，后面我又重新找他要了g16版本的formchk文件，然后重新配置一下环境变量，运行起来就正常了，以下是正常输出结果的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">[jason@cabc1 MDD]$ formchk MA.chk<br> Read checkpoint file MA.chk type G16<br> Write formatted file MA.fchk<br> FChkPn:  Coordinates translated and rotated.<br> FChkPn:  Coordinates match /B/ after translation and rotation.<br><br></code></pre></td></tr></table></figure><h3 id="Multiwfn处理">Multiwfn处理</h3><p>这一步的处理与之前类似，很容易就得到了处理好的vtx.pdb文件</p><h3 id="VMD查看分子动力学直径">VMD查看分子动力学直径</h3><p>导入之后的图经过点处理是这样的，还是很难去判断动力学直径的。</p><p><img src="https://image.phoenixjason.cn/file/phoenixjason-img/MDD/5.png" alt=""></p><p>大致调一下视角，选点并测距离。</p><p><img src="https://image.phoenixjason.cn/file/phoenixjason-img/MDD/6.png" alt=""></p><p><img src="https://image.phoenixjason.cn/file/phoenixjason-img/MDD/7.png" alt=""></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 纯文本">Info) Added new Bonds label MOL1:C/MOL1:C = 3.841880<br></code></pre></td></tr></table></figure><p>最后得出MA的分子动力学直径为3.8419埃</p><h2 id="总结">总结</h2><h3 id="一些思考">一些思考</h3><h4 id="关于计算过程">关于计算过程</h4><p>这个获得的分子动力学直径正如博文中所说，还是比较粗糙的，并没有考虑极化等对电子密度的影响，感觉这个对分子动力学的影响还挺大的，还有溶剂化结构什么的，这一方面的计算还有提升的空间，可能需要更加科学合理的定义以及开创新的计算方法才行。</p><h4 id="关于取点">关于取点</h4><p>在取点的过程中真的是比较折磨的，对其，取点，真的是一个只可意会不可言传的东西，主观性还是有的，虽然最后取出的值不会有太大的差异，但是终究来说还是会让人比较抓狂，自我怀疑，这一部分的工作我觉得可以交给程序去实现，但是具体的实现步骤就还得好好学习一下编程了。任重而道远呀。</p><h3 id="关于报错">关于报错</h3><h4 id="formchk无法运行，没有这个command">formchk无法运行，没有这个command</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">formchk: <span class="hljs-built_in">command</span> not found<br></code></pre></td></tr></table></figure><p><a href="http://bbs.keinsci.com/thread-13975-1-1.html" title="参考链接1">参考链接1</a></p><p>问题点在于软件的安装配置问题，这个需要找管理员解决，或者知道高斯的安装目录，自行设置环境变量。</p><ul><li><p>解决办法</p><p>找老师拿了一个formchk的文件，自己配置了一下环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 创建了一个目录 software/formchk_bin,将老师给的formchk文件置于其中</span><br><span class="hljs-comment"># 给formchk添加运行权限</span><br><span class="hljs-built_in">chmod</span> +x formchk<br><br><span class="hljs-comment"># 配置环境变量</span><br>vim ~/.bashrc<br><span class="hljs-comment"># 在其中添加</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;/home/jason/software/formchk_bin:<span class="hljs-variable">$PATH</span>&quot;</span><br><br><span class="hljs-comment">#保存退出，刷新shell的环境</span><br><span class="hljs-built_in">source</span> ~/.barshrc<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Study</tag>
      
      <tag>Gaussian</tag>
      
      <tag>MD</tag>
      
      <tag>Chemistry</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
